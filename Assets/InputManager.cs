//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/InputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputManager"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""2afd6e01-74ce-4dd4-8002-8169f172a2db"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""87e22f49-d549-4fb3-a36f-64c44ace0f15"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4e781a09-dd2c-4e96-bffc-b642604fbe4d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""5f926ac5-3633-429c-9276-7672e34e4d17"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""PassThrough"",
                    ""id"": ""50d3d5f4-1396-47b1-b62f-713ad14e66ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookingX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""dc44d543-042c-45ce-856d-9d4899095d7d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookingY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""fdbff9ff-5b3a-43c0-9f6b-cdce008ae3e1"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChangeWeaponsMouse"",
                    ""type"": ""PassThrough"",
                    ""id"": ""461eed65-ae20-46dc-b2aa-0dd0ca77c161"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aiming"",
                    ""type"": ""PassThrough"",
                    ""id"": ""38725da0-0261-463c-9994-dd96e2fc8924"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MenuPopUp"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4bb94987-dd72-40f3-ab4b-f89344634adb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f2f2bc6b-7ad3-4888-90cc-fe4747376301"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""79d0527c-a4bd-4c2f-a836-4b80e06e26ac"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a6c9bc76-6cc2-49d3-83ff-cc05beba67e0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""42542793-1e6d-4fa0-912b-5eb912593876"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ab2b4b94-a0be-4b79-a3ca-0507bee79aa7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ee2749fa-85af-42e8-a31c-fd29af4b5327"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8cc202c-a733-4b71-94a5-6aec74b2aef9"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""057337f7-4ee0-451b-9f5b-6bf0852e7e78"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""903cff29-db56-4a9d-8d57-b5e77d502f6f"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""LookingX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e5461ba-a38e-40da-8ae2-e2d2d6edb6c8"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""LookingY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e61746b-9233-4082-a54d-e2b9fd7fb035"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ChangeWeaponsMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0bb15391-cd46-4502-b48b-73207d7d987a"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Aiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f0aa4e2-d287-4d25-a1de-09573aeb1e40"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MenuPopUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player2"",
            ""id"": ""ccb30b7c-0b91-4cab-86e6-53921799c78d"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5f463651-e948-45f3-8aab-7b8a0bd0f0ed"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1ff6a412-04c7-439f-92e6-89f7a6af4aa7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""c85216c8-7412-4b2f-a09d-17abc576f839"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""PassThrough"",
                    ""id"": ""209b0272-042f-48c7-8304-72d803bc8767"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookingX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d4314d18-f662-4e48-ae4b-92ededbad3df"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookingY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""93682bbb-a216-45a5-b42d-29c63da22920"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChangeWeaponsControllerRight"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4c3370cb-5571-4dab-bdfd-b983ee84179c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeWeaponsControllerLeft"",
                    ""type"": ""PassThrough"",
                    ""id"": ""18270dea-7dd1-402b-990b-995f293c2e00"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aiming"",
                    ""type"": ""PassThrough"",
                    ""id"": ""36f0cc7e-6220-4a1e-934a-e43a704a1da5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MenuPopUp"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d1ab9eaa-dbfa-476d-9915-f70e69b14c6c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""54756288-b696-48c3-b3cb-abad360182a1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c443f2ac-efbd-4e1d-bd75-6df2e1f9e6d7"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""70e80d7b-fd42-4908-adad-a4d029c4f8d8"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0a2d8b3c-3ce1-43b4-97c7-10b04995b7b3"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4f4392c1-742e-4e80-8f1e-836e42a70f88"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c06b9242-f6c3-4092-a4d6-7a2cee27332f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f9b7bb50-2ca7-4ad9-ad81-d91b1dc4e5b7"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a86471e-6af0-4418-b402-6d9e29f9e69a"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d27177bf-0523-4bea-9dfe-3325c62dd52b"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""LookingX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""251352d2-8577-4f4b-90b2-1fd3028d7243"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""LookingY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b02b5ee-3e75-4ca1-a564-7b2e1b8155ff"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""ChangeWeaponsControllerRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45e5cdc7-1f63-4222-8759-44c2806b9485"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""ChangeWeaponsControllerLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""143658d9-75f3-460a-8710-f15344b8469b"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Aiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""744a9ad1-5144-4ac5-af18-8eaa7faff78d"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""MenuPopUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Dash = m_Player.FindAction("Dash", throwIfNotFound: true);
        m_Player_Shoot = m_Player.FindAction("Shoot", throwIfNotFound: true);
        m_Player_LookingX = m_Player.FindAction("LookingX", throwIfNotFound: true);
        m_Player_LookingY = m_Player.FindAction("LookingY", throwIfNotFound: true);
        m_Player_ChangeWeaponsMouse = m_Player.FindAction("ChangeWeaponsMouse", throwIfNotFound: true);
        m_Player_Aiming = m_Player.FindAction("Aiming", throwIfNotFound: true);
        m_Player_MenuPopUp = m_Player.FindAction("MenuPopUp", throwIfNotFound: true);
        // Player2
        m_Player2 = asset.FindActionMap("Player2", throwIfNotFound: true);
        m_Player2_Movement = m_Player2.FindAction("Movement", throwIfNotFound: true);
        m_Player2_Jump = m_Player2.FindAction("Jump", throwIfNotFound: true);
        m_Player2_Dash = m_Player2.FindAction("Dash", throwIfNotFound: true);
        m_Player2_Shoot = m_Player2.FindAction("Shoot", throwIfNotFound: true);
        m_Player2_LookingX = m_Player2.FindAction("LookingX", throwIfNotFound: true);
        m_Player2_LookingY = m_Player2.FindAction("LookingY", throwIfNotFound: true);
        m_Player2_ChangeWeaponsControllerRight = m_Player2.FindAction("ChangeWeaponsControllerRight", throwIfNotFound: true);
        m_Player2_ChangeWeaponsControllerLeft = m_Player2.FindAction("ChangeWeaponsControllerLeft", throwIfNotFound: true);
        m_Player2_Aiming = m_Player2.FindAction("Aiming", throwIfNotFound: true);
        m_Player2_MenuPopUp = m_Player2.FindAction("MenuPopUp", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Dash;
    private readonly InputAction m_Player_Shoot;
    private readonly InputAction m_Player_LookingX;
    private readonly InputAction m_Player_LookingY;
    private readonly InputAction m_Player_ChangeWeaponsMouse;
    private readonly InputAction m_Player_Aiming;
    private readonly InputAction m_Player_MenuPopUp;
    public struct PlayerActions
    {
        private @PlayerInputAction m_Wrapper;
        public PlayerActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Dash => m_Wrapper.m_Player_Dash;
        public InputAction @Shoot => m_Wrapper.m_Player_Shoot;
        public InputAction @LookingX => m_Wrapper.m_Player_LookingX;
        public InputAction @LookingY => m_Wrapper.m_Player_LookingY;
        public InputAction @ChangeWeaponsMouse => m_Wrapper.m_Player_ChangeWeaponsMouse;
        public InputAction @Aiming => m_Wrapper.m_Player_Aiming;
        public InputAction @MenuPopUp => m_Wrapper.m_Player_MenuPopUp;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Dash.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDash;
                @Shoot.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShoot;
                @LookingX.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLookingX;
                @LookingX.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLookingX;
                @LookingX.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLookingX;
                @LookingY.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLookingY;
                @LookingY.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLookingY;
                @LookingY.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLookingY;
                @ChangeWeaponsMouse.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChangeWeaponsMouse;
                @ChangeWeaponsMouse.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChangeWeaponsMouse;
                @ChangeWeaponsMouse.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChangeWeaponsMouse;
                @Aiming.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAiming;
                @Aiming.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAiming;
                @Aiming.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAiming;
                @MenuPopUp.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMenuPopUp;
                @MenuPopUp.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMenuPopUp;
                @MenuPopUp.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMenuPopUp;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @LookingX.started += instance.OnLookingX;
                @LookingX.performed += instance.OnLookingX;
                @LookingX.canceled += instance.OnLookingX;
                @LookingY.started += instance.OnLookingY;
                @LookingY.performed += instance.OnLookingY;
                @LookingY.canceled += instance.OnLookingY;
                @ChangeWeaponsMouse.started += instance.OnChangeWeaponsMouse;
                @ChangeWeaponsMouse.performed += instance.OnChangeWeaponsMouse;
                @ChangeWeaponsMouse.canceled += instance.OnChangeWeaponsMouse;
                @Aiming.started += instance.OnAiming;
                @Aiming.performed += instance.OnAiming;
                @Aiming.canceled += instance.OnAiming;
                @MenuPopUp.started += instance.OnMenuPopUp;
                @MenuPopUp.performed += instance.OnMenuPopUp;
                @MenuPopUp.canceled += instance.OnMenuPopUp;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Player2
    private readonly InputActionMap m_Player2;
    private IPlayer2Actions m_Player2ActionsCallbackInterface;
    private readonly InputAction m_Player2_Movement;
    private readonly InputAction m_Player2_Jump;
    private readonly InputAction m_Player2_Dash;
    private readonly InputAction m_Player2_Shoot;
    private readonly InputAction m_Player2_LookingX;
    private readonly InputAction m_Player2_LookingY;
    private readonly InputAction m_Player2_ChangeWeaponsControllerRight;
    private readonly InputAction m_Player2_ChangeWeaponsControllerLeft;
    private readonly InputAction m_Player2_Aiming;
    private readonly InputAction m_Player2_MenuPopUp;
    public struct Player2Actions
    {
        private @PlayerInputAction m_Wrapper;
        public Player2Actions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player2_Movement;
        public InputAction @Jump => m_Wrapper.m_Player2_Jump;
        public InputAction @Dash => m_Wrapper.m_Player2_Dash;
        public InputAction @Shoot => m_Wrapper.m_Player2_Shoot;
        public InputAction @LookingX => m_Wrapper.m_Player2_LookingX;
        public InputAction @LookingY => m_Wrapper.m_Player2_LookingY;
        public InputAction @ChangeWeaponsControllerRight => m_Wrapper.m_Player2_ChangeWeaponsControllerRight;
        public InputAction @ChangeWeaponsControllerLeft => m_Wrapper.m_Player2_ChangeWeaponsControllerLeft;
        public InputAction @Aiming => m_Wrapper.m_Player2_Aiming;
        public InputAction @MenuPopUp => m_Wrapper.m_Player2_MenuPopUp;
        public InputActionMap Get() { return m_Wrapper.m_Player2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player2Actions set) { return set.Get(); }
        public void SetCallbacks(IPlayer2Actions instance)
        {
            if (m_Wrapper.m_Player2ActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_Player2ActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_Player2ActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_Player2ActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_Player2ActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_Player2ActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_Player2ActionsCallbackInterface.OnJump;
                @Dash.started -= m_Wrapper.m_Player2ActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_Player2ActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_Player2ActionsCallbackInterface.OnDash;
                @Shoot.started -= m_Wrapper.m_Player2ActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_Player2ActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_Player2ActionsCallbackInterface.OnShoot;
                @LookingX.started -= m_Wrapper.m_Player2ActionsCallbackInterface.OnLookingX;
                @LookingX.performed -= m_Wrapper.m_Player2ActionsCallbackInterface.OnLookingX;
                @LookingX.canceled -= m_Wrapper.m_Player2ActionsCallbackInterface.OnLookingX;
                @LookingY.started -= m_Wrapper.m_Player2ActionsCallbackInterface.OnLookingY;
                @LookingY.performed -= m_Wrapper.m_Player2ActionsCallbackInterface.OnLookingY;
                @LookingY.canceled -= m_Wrapper.m_Player2ActionsCallbackInterface.OnLookingY;
                @ChangeWeaponsControllerRight.started -= m_Wrapper.m_Player2ActionsCallbackInterface.OnChangeWeaponsControllerRight;
                @ChangeWeaponsControllerRight.performed -= m_Wrapper.m_Player2ActionsCallbackInterface.OnChangeWeaponsControllerRight;
                @ChangeWeaponsControllerRight.canceled -= m_Wrapper.m_Player2ActionsCallbackInterface.OnChangeWeaponsControllerRight;
                @ChangeWeaponsControllerLeft.started -= m_Wrapper.m_Player2ActionsCallbackInterface.OnChangeWeaponsControllerLeft;
                @ChangeWeaponsControllerLeft.performed -= m_Wrapper.m_Player2ActionsCallbackInterface.OnChangeWeaponsControllerLeft;
                @ChangeWeaponsControllerLeft.canceled -= m_Wrapper.m_Player2ActionsCallbackInterface.OnChangeWeaponsControllerLeft;
                @Aiming.started -= m_Wrapper.m_Player2ActionsCallbackInterface.OnAiming;
                @Aiming.performed -= m_Wrapper.m_Player2ActionsCallbackInterface.OnAiming;
                @Aiming.canceled -= m_Wrapper.m_Player2ActionsCallbackInterface.OnAiming;
                @MenuPopUp.started -= m_Wrapper.m_Player2ActionsCallbackInterface.OnMenuPopUp;
                @MenuPopUp.performed -= m_Wrapper.m_Player2ActionsCallbackInterface.OnMenuPopUp;
                @MenuPopUp.canceled -= m_Wrapper.m_Player2ActionsCallbackInterface.OnMenuPopUp;
            }
            m_Wrapper.m_Player2ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @LookingX.started += instance.OnLookingX;
                @LookingX.performed += instance.OnLookingX;
                @LookingX.canceled += instance.OnLookingX;
                @LookingY.started += instance.OnLookingY;
                @LookingY.performed += instance.OnLookingY;
                @LookingY.canceled += instance.OnLookingY;
                @ChangeWeaponsControllerRight.started += instance.OnChangeWeaponsControllerRight;
                @ChangeWeaponsControllerRight.performed += instance.OnChangeWeaponsControllerRight;
                @ChangeWeaponsControllerRight.canceled += instance.OnChangeWeaponsControllerRight;
                @ChangeWeaponsControllerLeft.started += instance.OnChangeWeaponsControllerLeft;
                @ChangeWeaponsControllerLeft.performed += instance.OnChangeWeaponsControllerLeft;
                @ChangeWeaponsControllerLeft.canceled += instance.OnChangeWeaponsControllerLeft;
                @Aiming.started += instance.OnAiming;
                @Aiming.performed += instance.OnAiming;
                @Aiming.canceled += instance.OnAiming;
                @MenuPopUp.started += instance.OnMenuPopUp;
                @MenuPopUp.performed += instance.OnMenuPopUp;
                @MenuPopUp.canceled += instance.OnMenuPopUp;
            }
        }
    }
    public Player2Actions @Player2 => new Player2Actions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnLookingX(InputAction.CallbackContext context);
        void OnLookingY(InputAction.CallbackContext context);
        void OnChangeWeaponsMouse(InputAction.CallbackContext context);
        void OnAiming(InputAction.CallbackContext context);
        void OnMenuPopUp(InputAction.CallbackContext context);
    }
    public interface IPlayer2Actions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnLookingX(InputAction.CallbackContext context);
        void OnLookingY(InputAction.CallbackContext context);
        void OnChangeWeaponsControllerRight(InputAction.CallbackContext context);
        void OnChangeWeaponsControllerLeft(InputAction.CallbackContext context);
        void OnAiming(InputAction.CallbackContext context);
        void OnMenuPopUp(InputAction.CallbackContext context);
    }
}
